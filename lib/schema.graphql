enum Level{
    principiante
    intermedio
    avanzado
}

type Course {
    _id: ID!
    title: String!
    teacher: String
    description: String!
    topic: String @deprecated
    students: [Student]
    level: Level
}

interface Person {
    _id : ID!
    name: String!
    email: String!
}

type Monitor implements Person {
    _id : ID!
    name: String!
    email: String!
    phone: String
}

type Student implements Person {
    _id : ID!
    name: String!
    email: String!
    avatar: String
}

input CourseInput {
    title: String!
    teacher: String
    description: String!
    topic: String
    level: Level
}

input CourseEditInput {
    title: String
    teacher: String
    description: String
    topic: String
}

input PersonInput {
    name: String!
    email: String!
    phone: String
    avatar: String
}

input PersonEditInput {
    name: String
    email: String
    phone: String
    avatar: String
}

type Query {
    getCourses: [Course]
    getCourse(id: ID!) : Course
    getPeople: [Person]
    getPerson(id: ID!) : Person
}

type Mutation {
    createCourse(input : CourseInput!) : Course
    editCourse(_id: ID!, input : CourseEditInput!) : Course
    deleteCourse(_id: ID!) : Boolean

    createPerson(input: PersonInput!): Person
    editPerson(_id: ID!, input : PersonEditInput!) : Person
    deletePerson(_id: ID!) : Boolean

    addPeople(courseID : ID!, studentID : ID!) : Boolean
}